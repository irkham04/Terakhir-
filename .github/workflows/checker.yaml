- name: Baca sub_urls.txt dan test (fix: cek HTTP status)
    run: |
      touch active_configs.txt
      touch failed.txt

      while IFS= read -r line || [[ -n "$line" ]]; do
        if [ -z "$line" ]; then continue; fi

        echo "=== Processing: $line ==="

        if [[ "$line" =~ ^http ]]; then
          echo "Testing link: $line"

          # Cek HTTP status dulu
          http_status=$(curl -s -o /dev/null -w "%{http_code}" -I "$line")
          echo "HTTP Status: $http_status"
          if [[ "$http_status" != "200" && "$http_status" != "301" && "$http_status" != "302" ]]; then
            echo "Failed: $line - Invalid HTTP status $http_status" >> failed.txt
            continue
          fi

          if [[ "$line" == *.txt ]]; then
            if curl -s -f "$line" > temp_fetched.txt; then
              dos2unix temp_fetched.txt
              echo "Fetched TXT: $(wc -l < temp_fetched.txt) lines"
              timeout 30s ./lite --config config.json --test temp_fetched.txt > temp_output.txt 2>&1 || echo "Timeout TXT: $line" >> failed.txt
            else
              echo "Gagal fetch TXT: $line" >> failed.txt
              continue
            fi
          else
            timeout 30s ./lite --config config.json --test "$line" > temp_output.txt 2>&1 || echo "Timeout/Exit 1: $line" >> failed.txt
          fi

          echo "Full output for $line:"
          cat temp_output.txt

          if grep -q "OK\|success\|IsOk" temp_output.txt; then
            awk '/(OK|success|IsOk)/ && /(vmess|vless|trojan|ss|ssr):\/\// {print $0}' temp_output.txt | \
            sed -E 's/.*(vmess:\/\/[^ ]+).*/\1/g' | \
            sed -E 's/.*(vless:\/\/[^ ]+).*/\1/g' | \
            sed -E 's/.*(trojan:\/\/[^ ]+).*/\1/g' | \
            sed -E 's/.*(ss:\/\/[^ ]+).*/\1/g' | \
            sed -E 's/.*(ssr:\/\/[^ ]+).*/\1/g' | \
            grep -v "^$" >> active_configs.txt
            echo "Found active from $line"
          else
            echo "No valid nodes for $line - $(grep -i error temp_output.txt | head -1)" >> failed.txt
          fi

        elif [[ "$line" =~ ^(vmess|vless|trojan|ss|ssr):// ]]; then
          echo "Testing direct: $line"
          timeout 10s ./lite --config config.json --test "$line" > temp_output_single.txt 2>&1
          echo "Direct output:" && cat temp_output_single.txt
          if grep -q "OK\|success\|IsOk" temp_output_single.txt; then
            echo "$line" >> active_configs.txt
          else
            echo "Failed direct: $line" >> failed.txt
          fi
        else
          echo "Invalid: $line" >> failed.txt
        fi

        echo "" >> active_configs.txt
      done < sub_urls.txt

      if [ -s active_configs.txt ]; then
        echo "# Active Proxies - $(date) - LiteSpeedTest" > header.txt
        echo "# Only OK nodes: VMess/VLESS/Trojan/SS" >> header.txt
        sort -u active_configs.txt | grep -v "^$" | grep -E "(vmess|vless|trojan|ss|ssr)://" >> header.txt
        mv header.txt active_configs.txt
        echo "Active count: $(wc -l < active_configs.txt)"
        head -10 active_configs.txt
      else
        echo "# No actives - $(date)" > active_configs.txt
      fi

      if [ -s failed.txt ]; then
        echo "Failed:"
        cat failed.txt
      fi
